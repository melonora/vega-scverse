{
    "$defs": {
        "AggregateOpsEnum": {
            "description": "The summary statistic to apply for an aggregation transform. The summary statistic is calculated per datashade\nraster pixel.",
            "enum": [
                "any",
                "max",
                "min",
                "mean",
                "stdev",
                "sum",
                "variance",
                "count"
            ],
            "title": "AggregateOpsEnum",
            "type": "string"
        },
        "AggregateTransform": {
            "additionalProperties": false,
            "description": "Group and summarize an input data stream to produce a derived output stream using particular summary statistics\noperations, e.g. sum, average etc..",
            "properties": {
                "as": {
                    "description": "The output field names to use for each aggregated field in fields. In the initial implementation this is\nthe same as the values in 'field'.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "field": {
                    "description": "The data fields for which to compute aggregate functions. This array should align with the as \narrays.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ops": {
                    "description": "The summary statistic to apply per field. This deviates from vega where ops has a single string value\nwhile here it is an array with a length equal to 'field' and 'as'.",
                    "items": {
                        "$ref": "#/$defs/AggregateOpsEnum"
                    },
                    "type": "array"
                },
                "type": {
                    "$ref": "#/$defs/TransformTypeEnum",
                    "const": "aggregate",
                    "description": "The type of transform."
                }
            },
            "required": [
                "field",
                "ops",
                "as",
                "type"
            ],
            "title": "AggregateTransform",
            "type": "object"
        },
        "FilterChannelTransform": {
            "additionalProperties": false,
            "description": "Filter on particular channels in a raster data object.",
            "properties": {
                "expr": {
                    "description": "The channel(s) to filter the input data stream on. Either a list of integers that correspond to the channel\nindices or list of strings that refer to the name of the channels. Preferably, it SHOULD be the latter to\nprevent a different context when ordering of the channels changes.",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "$ref": "#/$defs/TransformTypeEnum",
                    "const": "filter_channel",
                    "description": "The type of filter transform. 'filter_element' will filter / select a particular element from a data source,\n'filter_cs' will select the coordinate system in which the element should be visualized and 'filter_scale'\nwill select the scale of a multiscale raster data element."
                }
            },
            "required": [
                "expr",
                "type"
            ],
            "title": "FilterChannelTransform",
            "type": "object"
        },
        "FilterTransform": {
            "additionalProperties": false,
            "description": "Select objects from a data stream to keep based on a filter expression. If the value of the filter expression\nis a single element, e.g. 'blobs_image', then the expression is equivalent to 'datum.value == blobs_image'.\nThese are the first transforms in the array of transforms usually when visualizing SpatialData elements.",
            "properties": {
                "expr": {
                    "description": "Either the name of the element or coordinate system to filter / select.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/$defs/TransformTypeEnum",
                    "description": "The type of filter transform. 'filter_element' will filter / select a particular element from a data source,\n'filter_cs' will select the coordinate system in which the element should be visualized and 'filter_scale'\nwill select the scale of a multiscale raster data element.",
                    "enum": [
                        "filter_element",
                        "filter_cs",
                        "filter_scale"
                    ]
                }
            },
            "required": [
                "expr",
                "type"
            ],
            "title": "FilterTransform",
            "type": "object"
        },
        "Format": {
            "additionalProperties": false,
            "description": "Format object containing the type of data as object and a string value representing the version.",
            "properties": {
                "type": {
                    "description": "The type of the data as string, e.g. RasterFormat",
                    "type": "string"
                },
                "version": {
                    "description": "The version of the data type that is defined. Defined as semantic version + optional development release.",
                    "pattern": "^(\\d+\\.\\d+)(\\.\\d+)?([a-zA-Z0-9.+-]*)?$",
                    "type": "string"
                }
            },
            "required": [
                "type",
                "version"
            ],
            "title": "Format",
            "type": "object"
        },
        "NormalizationFormulaTransform": {
            "additionalProperties": false,
            "description": "A formula to transform data.",
            "properties": {
                "as": {
                    "description": "The output field names to use for each field to which a normalization is applied.",
                    "type": "string"
                },
                "expr": {
                    "description": "Formula represented as string that in this case applies a normalization on the data. The column or field of \ndata that is normalized is indicated as 'datum.<name_of_column>'.",
                    "pattern": "(?:clamp\\(\\s*)?\\(\\s*datum\\.\\w+\\s*[-+*/]\\s*[\\d.]+\\s*\\)\\s*[-+*/]\\s*\\(\\s*[\\d.]+\\s*[-+*/]\\s*[\\d.]+\\s*\\)(?:\\s*,\\s*[\\d.]+\\s*,\\s*[\\d.]+\\s*\\))?",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/$defs/TransformTypeEnum",
                    "const": "formula",
                    "description": "The type of transform."
                }
            },
            "required": [
                "expr",
                "as",
                "type"
            ],
            "title": "NormalizationFormulaTransform",
            "type": "object"
        },
        "SpatialDataElementObject": {
            "additionalProperties": false,
            "description": "Data object pertaining to an element within the SpatialData object.",
            "properties": {
                "format": {
                    "$ref": "#/$defs/Format",
                    "description": "Format object containing the type of data as object and a string value representing the version."
                },
                "name": {
                    "description": "The name used throughout the view configuration to refer to the data object. It is an arbitrary string \nfollowed by an underscore and pseudo UUID.",
                    "pattern": "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                    "type": "string"
                },
                "source": {
                    "description": "The source of the SpatialData element. Must be the name / identifier of a SpatialData Object in the \nview configuration.",
                    "pattern": "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                    "type": "string"
                },
                "transform": {
                    "description": "An array of transforms applied to the SpatialData element. The first transform is always `filter_element`,\nwhich filters the SpatialData source object based on the element name. This is followed by `filter_cs`, to\nspecify in which coordinate system the element should be visualized. This can be followed by other optional\ntransforms.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/$defs/FilterTransform"
                            },
                            {
                                "$ref": "#/$defs/FilterChannelTransform"
                            },
                            {
                                "$ref": "#/$defs/AggregateTransform"
                            },
                            {
                                "$ref": "#/$defs/SpreadTransform"
                            },
                            {
                                "$ref": "#/$defs/NormalizationFormulaTransform"
                            }
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "source",
                "transform",
                "name",
                "format"
            ],
            "title": "SpatialDataElementObject",
            "type": "object"
        },
        "SpatialDataObject": {
            "additionalProperties": false,
            "description": "SpatialData object specific to the SpatialData root",
            "properties": {
                "format": {
                    "$ref": "#/$defs/Format",
                    "description": "Format object containing the type of data as object and a string value representing the version."
                },
                "name": {
                    "description": "The name used throughout the view configuration to refer to the data object. It is an arbitrary string \nfollowed by an underscore and pseudo UUID.",
                    "pattern": "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                    "type": "string"
                },
                "url": {
                    "description": "The absolute path to the SpatialData zarr.",
                    "type": "string"
                }
            },
            "required": [
                "url",
                "name",
                "format"
            ],
            "title": "SpatialDataObject",
            "type": "object"
        },
        "SpreadTransform": {
            "additionalProperties": false,
            "description": "Datashade transform expanding each pixel in a rasterized image by a specified number of pixels to make sparse \ndata more visible. This transform MUST be preceded by an aggregate transform and is optionally preceded by \na normalization transform ('formula').",
            "properties": {
                "as": {
                    "description": "The output field names to use for each field to which a spread transform is applied. In the initial \nimplementation this is the same as the values in 'field'.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "field": {
                    "description": "The data fields on which to apply the spread transform. This array should align with the as \narrays.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "px": {
                    "description": "The amount of pixels by which to expand each pixel to make data more visible.",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/$defs/TransformTypeEnum",
                    "const": "spread",
                    "description": "The type of transform."
                }
            },
            "required": [
                "field",
                "px",
                "as",
                "type"
            ],
            "title": "SpreadTransform",
            "type": "object"
        },
        "TableObject": {
            "additionalProperties": false,
            "description": "AnnData Table object stream.",
            "properties": {
                "format": {
                    "$ref": "#/$defs/Format",
                    "description": "Format object containing the type of data as object and a string value representing the version."
                },
                "name": {
                    "description": "The name used throughout the view configuration to refer to the data object. It is an arbitrary string \nfollowed by an underscore and pseudo UUID.",
                    "pattern": "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                    "type": "string"
                },
                "source": {
                    "description": "The source of the SpatialData element. Must be the name / identifier of a SpatialData Object in the \nview configuration.",
                    "pattern": "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                    "type": "string"
                },
                "transform": {
                    "description": "An array containing a single transform 'filter_element' with an expression stating which table to obtain\nfrom the source SpatialData object stream.",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/$defs/FilterTransform"
                            }
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "source",
                "transform",
                "name",
                "format"
            ],
            "title": "TableObject",
            "type": "object"
        },
        "TransformTypeEnum": {
            "description": "Valid transforms on a data stream within a scverse viewconfig.",
            "enum": [
                "filter_element",
                "filter_cs",
                "filter_scale",
                "filter_channel",
                "aggregate",
                "spread",
                "lookup",
                "formula"
            ],
            "title": "TransformTypeEnum",
            "type": "string"
        }
    },
    "$id": "https://w3id.org/scverse/vega-scverse/data",
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "additionalProperties": true,
    "metamodel_version": "1.7.0",
    "title": "vega-scverse-data",
    "type": "object",
    "version": "0.1.0"
}
