---
id: https://w3id.org/scverse/vega-scverse/marks
name: vega-scverse-marks
version: 0.1.0
title: vega-scverse-marks
description: |-
  Vega like specification for the marks used in view configurations for the scverse visualization ecosystem.
license: BSD-3
see_also:
  - https://scverse.github.io/vega-scverse

prefixes:
  vega_scverse: https://w3id.org/scverse/vega-scverse/
  linkml: https://w3id.org/linkml/
  orcid: https://orcid.org/
default_prefix: vega_scverse
default_range: string

imports:
  - linkml:types
  - linkml_encode
  - linkml_scales
  - linkml_axes
  - linkml_legends

created_on: "2025-06-01"
created_by: orcid:0000-0003-1666-5421

classes:
  Mark:
    abstract: true
    description: |-
      Graphical marks visually encode data using geometric primitives such as rectangles, lines, and plotting symbols. 
      Marks are the basic visual building block of a visualization, providing basic shapes whose properties can be set 
      according to backing data. Mark property definitions may be simple constants or data fields, or scales can be 
      used to map data values to visual values.
    attributes:
      type:
        description: |-
          The type of mark.
        range: MarkTypeEnum
        required: true
      # The reason for adding the underscore here is that from is reserved in python for imports, something that
      # can't be respected if the underscore is not being added.
      from_:
        description: |- 
          The data stream used as the source for the graphical mark.
        range: MarkDataSource
        required: true
      encode:
        description: |-
          A set of visual encoding properties that determine the position and appearance of mark instances. In Vega, 
          there are three primary property sets: enter, update, exit. The enter properties are evaluated when data is 
          processed for the first time and a mark instance is newly added to a scene. The update properties are 
          evaluated for all existing (non-exiting) mark instances. The exit properties are evaluated when the data 
          backing a mark is removed, and so the mark is leaving the visual scene. However, in this specification we 
          currently only support enter and update property sets.
        required: true
      zindex:
        description: |-
          An integer z-index indicating the layering order of sibling mark items. The default value is 0. Higher values 
          (1) will cause marks to be drawn on top of those with lower z-index values.
        range: integer
        required: true

  MarkDataSource:
    description: |-
      Object with a data field pointing to the name of the datastream that serves as data source for the mark.
    attributes:
      data:
        description: name of the datastream
        pattern: "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
        required: true

  RasterImageMark:
    is_a: Mark
    description: |-
      Graphical mark encoding an image.
    slot_usage:
      type:
        description: |-
          The type of the mark. In this case, it is always 'raster_image'
        equals_string: raster_image
        ifabsent: string(raster_image)
      encode:
        description: |-
          A set of visual encoding properties that determine the position and appearance of the raster_image mark.
        range: ImageEncode

  RasterLabelMark:
    is_a: Mark
    description: |-
      Graphical mark encoding a label image.
    slot_usage:
      type:
        description: |-
          The type of the mark. In this case, it is always 'raster_label'
        equals_string: raster_label
        ifabsent: string(raster_label)
      encode:
        description: |-
          A set of visual encoding properties that determine the position and appearance of the raster_image mark.
        range: LabelEncode

  PointsMark:
    is_a: Mark
    description: |-
      Graphical mark for encoding points data, using a vega like symbol mark.
    slot_usage:
      type:
        description: |-
          The type of the mark. In this case, it is always 'symbol'.
        equals_string: symbol
        ifabsent: string(symbol)
      encode:
        description: |-
          A set of visual encoding properties that determine the position and appearance of the symbol mark.
        range: SymbolEncode

  ShapesMark:
    is_a: Mark
    description: |-
      Graphical mark for encoding shapes data, using a vega like path mark.
    slot_usage:
      type:
        description: |-
          The type of the mark. In this case, it is always 'symbol'.
        equals_string: path
        ifabsent: string(path)
      encode:
        description: |-
          A set of visual encoding properties that determine the position and appearance of the symbol mark.
        range: PathEncode

  TextMark:
    description: |-
      Text marks can be used to annotate data and provide labels and titles for axes and legends.
    attributes:
      type:
        description: |-
          The type of the mark. In this case, it is always 'text'.
        equals_string: text
        ifabsent: string(text)
      encode:
        range: TextEncode
      zindex:
        description: |-
          An integer z-index indicating the layering order of sibling mark items. The default value is 0. Higher values 
          (1) will cause marks to be drawn on top of those with lower z-index values.
        range: integer
        required: true


  BaseGroupMark:
    description: |- 
      Group marks are containers for other marks, and used to create visualizations with multiple views or layers. Each 
      group instance recursively defines its own nested visualization specification. Group marks provide their own 
      coordinate space and can include nested data, signal, scale, axis, legend, title and mark definitions.
    attributes:
      type:
        description: |-
          The type of the mark. In this case, it is always 'group'.
        equals_string: group
        ifabsent: string(group)
      encode:
        description: |-
          A set of visual encoding properties that determine the position of the group mark.
        range: GroupEncode
        required: true
      scales:
        description: |-
          Scales map data values (numbers, dates, categories, etc.) to visual values (pixels, colors, sizes).
          Scales are a fundamental building block of data visualization, as they determine the nature of visual
          encodings.
        any_of:
          - range: BaseAxisScale
          - range: BaseCategoricalColorScale
          - range: LinearColorScale
        multivalued: true
        required: true
      axes:
        description: |-
          Axes visualize spatial scale mappings using ticks, grid lines and labels.
        range: Axis
        multivalued: true
        required: true
      legend:
        description: |-
          Legends visualize scale mappings for visual values such as color, shape and size.
        any_of:
         - range: CategoricalLegend
         - range: ColorBarLegend
        multivalued: true
      marks:
        description: |-
          Graphical marks visually encode data using geometric primitives such as rectangles, lines, and plotting
          symbols. Marks are the basic visual building block of a visualization, providing basic shapes whose
          properties can be set according to backing data. Mark property definitions may be simple constants or data
          fields, or scales can be used to map data values to visual values.
        any_of:
         - range: RasterImageMark
         - range: RasterLabelMark
         - range: PointsMark
         - range: ShapesMark
         - range: TextMark
        multivalued: true
        required: true


enums:
  MarkTypeEnum:
    description: |-
      The valid mark types within the scverse plotting / visualization ecosystem.
    permissible_values:
      raster_image: Mark used for a SpatialData image element.
      raster_label: Mark used for SpatialData label element.
      symbol: The mark used for points data.
      path: The mark used for circle and shapes geometries.
