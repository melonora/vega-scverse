---
id: https://w3id.org/scverse/vega-scverse/data
name: vega-scverse-data
version: 0.1.0
title: vega-scverse-data
description: |-
  Vega like specification for the data array used in view configurations for the scverse visualization ecosystem.
license: BSD-3
see_also:
  - https://scverse.github.io/vega-scverse

prefixes:
  vega_scverse: https://w3id.org/scverse/vega-scverse/
  linkml: https://w3id.org/linkml/
  orcid: https://orcid.org/
default_prefix: vega_scverse
default_range: string

imports:
  - linkml:types

created_on: "2025-06-01"
created_by: orcid:0000-0003-1666-5421

classes:
############ Data objects ############
  DataObject:
    abstract: true
    description: |-
      Abstract class for Vega like data set definitions and transforms that define the data based on scverse data 
      models like SpatialData and AnnData to load and how to process it.
    attributes:
      name:
        description: |- 
          The name used throughout the view configuration to refer to the data object. It is an arbitrary string 
          followed by an underscore and pseudo UUID.
        required: true
        pattern: "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      format:
        description: |-
          Format object containing the type of data as object and a string or float value representing the version.
        required: true

  SpatialDataObject:
    is_a: DataObject
    description: |-
      SpatialData object specific to the SpatialData root
    attributes:
      url:
        description: |-
          The absolute path to the SpatialData zarr.
        range: string
        required: true
      format:
        range: SpatialDataFormat

  BaseTableObject:
    is_a: DataObject
    description: |-
      AnnData Table object stream.
    attributes:
      format:
        range: ElementFormat
        required: true
      source:
        description: |-
          The source of the SpatialData element. Must be the name / identifier of a SpatialData Object in the 
          view configuration.
        pattern: "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
        required: true
      transform:
        description: |-
          An array containing a single transform 'filter_element' with an expression stating which table to obtain
          from the source SpatialData object stream.
        multivalued: true
        # TODO: Exactly_one_of is currently not expressed in pydantic other than as a meta string.
        # subclassing instead
        range: FilterTransform
        required: true

  BaseSpatialDataElementObject:
    is_a: DataObject
    description: |-
      Data object pertaining to an element within the SpatialData object.
    attributes:
      format:
        range: ElementFormat
        required: true
      source:
        description: |-
          The source of the SpatialData element. Must be the name / identifier of a SpatialData Object in the 
          view configuration.
        pattern: "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
        required: true
      transform:
        description: |-
          An array of transforms applied to the SpatialData element. The first transform is always `filter_element`,
          which filters the SpatialData source object based on the element name. This is followed by `filter_cs`, to
          specify in which coordinate system the element should be visualized. This can be followed by other optional
          transforms.
        multivalued: true
        any_of:
          - range: BaseLookupTransform
          - range: FilterTransform
          - range: FilterChannelTransform
          - range: BaseAggregateTransform
          - range: BaseSpreadTransform
          - range: BaseNormalizationFormulaTransform
        required: true

############ Transforms ############
  Transform:
    abstract: true
    description: |-
      Transform of data applied to data input.
    attributes:
      type:
        description: |-
          The type of transform.
        range: TransformTypeEnum
        required: true

  FilterTransform:
    is_a: Transform
    description: |-
      Select objects from a data stream to keep based on a filter expression. If the value of the filter expression
      is a single element, e.g. 'blobs_image', then the expression is equivalent to 'datum.value == blobs_image'.
      These are the first transforms in the array of transforms usually when visualizing SpatialData elements.
    slot_usage:
      type:
        description: |-
          The type of filter transform. 'filter_element' will filter / select a particular element from a data source,
          'filter_cs' will select the coordinate system in which the element should be visualized and 'filter_scale'
          will select the scale of a multiscale raster data element.
        equals_string_in: [filter_element, filter_cs, filter_scale, filter_layer]
    attributes:
      expr:
        description: |-
          Either the name of the element or coordinate system to filter / select.
        range: string
        required: true

  FilterChannelTransform:
    is_a: Transform
    description: |-
      Filter on particular channels in a raster data object.
    slot_usage:
      type:
        description: |-
          The type of filter transform. 'filter_element' will filter / select a particular element from a data source,
          'filter_cs' will select the coordinate system in which the element should be visualized and 'filter_scale'
          will select the scale of a multiscale raster data element.
        equals_string: filter_channel
    attributes:
      expr:
        description: |- 
          The channel(s) to filter the input data stream on. Either a list of integers that correspond to the channel
          indices or list of strings that refer to the name of the channels. Preferably, it SHOULD be the latter to
          prevent a different context when ordering of the channels changes.
        multivalued: true
        any_of:
          - range: string
          - range: integer

  BaseLookupTransform:
    is_a: Transform
    description: |-
      Transform extending a primary data stream by looking up values on a secondary data stream.
    slot_usage:
      type:
        equals_string: lookup
        ifabsent: string(lookup)
    attributes:
      from_:
        description: |-
          The name of the secondary data stream upon which to perform the lookup.
        pattern: "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
        required: true
      key:
        description: |-
          The key field on the secondary stream, e.g. in table lookup it would be for example instance_id.
        range: string
        required: true
      fields:
        description: |-
          The data fields to copy from the secondary stream to the primary stream.
        range: string
        multivalued: true
        required: true
      values:
        description: |-
          To be added
        range: string
        multivalued: true
        required: true
      as_:
        description: |-
          To be added
        range: string
        multivalued: true
        required: true
      default:
        description: |-
          The default value to assign if lookup fails
        required: false
        ifabsent: null

  BaseAggregateTransform:
    is_a: Transform
    description: |-
      Group and summarize an input data stream to produce a derived output stream using particular summary statistics
      operations, e.g. sum, average etc..
    slot_usage:
      type:
        equals_string: aggregate
        ifabsent: string(aggregate)
    attributes:
      field:
        description: |-
          The data fields for which to compute aggregate functions. This array should align with the as 
          arrays.
        multivalued: true
        range: string
        required: true
      ops:
        description: |-
          The summary statistic to apply per field. This deviates from vega where ops has a single string value
          while here it is an array with a length equal to 'field' and 'as'.
        multivalued: true
        range: AggregateOpsEnum
        required: true
      as_:
        description: |-
          The output field names to use for each aggregated field in fields. In the initial implementation this is
          the same as the values in 'field'.
        multivalued: true
        range: string
        required: true

  BaseSpreadTransform:
    is_a: Transform
    description: |-
      Datashade transform expanding each pixel in a rasterized image by a specified number of pixels to make sparse 
      data more visible. This transform MUST be preceded by an aggregate transform and is optionally preceded by 
      a normalization transform ('formula').
    slot_usage:
      type:
        equals_string: spread
        ifabsent: string(spread)
    attributes:
      field:
        description: |-
          The data fields on which to apply the spread transform. This array should align with the as 
          arrays.
        multivalued: true
        range: string
        required: true
      px:
        description: |-
          The amount of pixels by which to expand each pixel to make data more visible.
        range: integer
        required: true
      as_:
        description: |-
          The output field names to use for each field to which a spread transform is applied. In the initial 
          implementation this is the same as the values in 'field'.
        multivalued: true
        range: string
        required: true

  BaseNormalizationFormulaTransform:
    is_a: Transform
    description: |-
      A formula to transform data.
    slot_usage:
      type:
        equals_string: formula
        ifabsent: string(formula)
    attributes:
      expr:
        description: |-
          Formula represented as string that in this case applies a normalization on the data. The column or field of 
          data that is normalized is indicated as 'datum.<name_of_column>'.
        pattern: "(?:clamp\\(\\s*)?\\(\\s*datum\\.\\w+\\s*[-+*/]\\s*[\\d.]+\\s*\\)\\s*[-+*/]\\s*\\(\\s*[\\d.]+\\s*[-+*/]\\s*[\\d.]+\\s*\\)(?:\\s*,\\s*[\\d.]+\\s*,\\s*[\\d.]+\\s*\\))?"
        required: true
      as_:
        description: |-
          The output field names to use for each field to which a normalization is applied.
        pattern: "^(.*_)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
        required: true

############ Formats ############
  BaseFormat:
    description: |- 
      Format object containing the type of data as object and a string value representing the version.
    abstract: true
    attributes:
      type:
        description: |-
          The type of the data as string, e.g. RasterFormat
        range: string
        required: true
      version:
        description: |- 
          The version of the data type that is defined. Defined as semantic version + optional development release.
          It is represented either as string value or float value.
        required: true

  SpatialDataFormat:
    is_a: BaseFormat
    attributes:
      version:
        pattern: "^(\\d+\\.\\d+)(\\.\\d+)?([a-zA-Z0-9.+-]*)?$"

  ElementFormat:
    is_a: BaseFormat
    attributes:
      version:
        range: float

enums:
  TransformTypeEnum:
    description: |-
      Valid transforms on a data stream within a scverse viewconfig.
    permissible_values:
      filter_element: Filter an element from a root data object, like a SpatialData zarr.
      filter_cs: Filter the coordinate systems of an element to point to coordinate system the element is displayed in.
      filter_scale: Filter on a particular scale in multiscale raster data.
      filter_channel: Filter on a particular channel in raster data.
      aggregate: Group and summarize an input data stream to produce a derived output stream.
      spread: Expand each pixel in a rasterized image by a specified number of pixels to make sparse data more visible.
      lookup: Extend a primary data stream by looking up values on a secondary data stream.
      formula: Apply a formula to a data input stream.
  AggregateOpsEnum:
    description: |-
      The summary statistic to apply for an aggregation transform. The summary statistic is calculated per datashade
      raster pixel.
    permissible_values:
      any:
      max: Maximum value of all elements in each datashade raster pixel.
      min: Minimum value of all elements in each datashade raster pixel.
      mean: Mean value of all elements in each datashade raster pixel.
      stdev: Standard deviation of all elements in each datashade raster pixel.
      sum: Sum of all elements in each datashade raster pixel
      variance: Variance of all elements in each datashade raster pixel.
      count: |-
        Count elements each datashade raster pixel, returning the result as a uint32, or a float32 if using 
        antialiasing.